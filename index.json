{"repository_name":"uniwidth","body":"# Unicode Character & String Width\n\nShard Provides functionality to get fixed width of the unicode character or string.\n\nFor more information, refer to **EAST ASIAN WIDTH** [Unicode Standard Annex #11](http://unicode.org/reports/tr29/) (Unicode version 13.0.0).\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     uniwidth:\n       github: naqvis/uni_char_width\n   ```\n\n2. Run `shards install`\n\n## Usage\n\nCode try to identify the locale and set `east_asian` property accordingly. You can enforce the code to enable **CJK** mode by setting `EASTASIAN` environment variable to \"1\". `strict_emoji_neutral` property is enabled by default, but this should be set to `false` for broken Fonts.\n\nModule `UnicodeCharWidth` provided methods uses the default settings (stated above), if you need to tweak the settings, instantiate an instance of `UnicodeCharWidth::Condition` class with respective settings.\n```crystal\nrequire \"uniwidth\"\n\n# String/Char width\npp UnicodeCharWidth.width(\"つのだ☆HIRO\") # => 12 on CJK locale\n\n# Truncate\npp UnicodeCharWidth.truncate(\"つのだ☆HIRO\",10,\"...\") # => \"つのだ...\"\n\n# Padding\npp UnicodeCharWidth.pad_left(\"あxいうえお\", 15) # => \"    あxいうえお\"\npp UnicodeCharWidth.pad_right(\"あxいうえお\", 15) # => \"あxいうえお    \"\n\n...\n```\n\nRefer to `specs` for more examples.\n\n## Development\n\nTo run all tests:\n\n```\ncrystal spec\n```\n\n## Contributing\n\n1. Fork it (<https://github.com/naqvis/uni_char_width/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Ali Naqvi](https://github.com/naqvis) - creator and maintainer\n","program":{"html_id":"uniwidth/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"uniwidth","program":true,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"uniwidth/UnicodeCharWidth","path":"UnicodeCharWidth.html","kind":"module","full_name":"UnicodeCharWidth","name":"UnicodeCharWidth","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/charwidth/charwidth.cr","line_number":6,"url":"https://github.com/naqvis/uni_char_width/blob/bbe0b6caaf93ec9a0550113be94632acd0b3d018/src/charwidth/charwidth.cr#L6"},{"filename":"src/charwidth/eastasian.cr","line_number":1,"url":"https://github.com/naqvis/uni_char_width/blob/bbe0b6caaf93ec9a0550113be94632acd0b3d018/src/charwidth/eastasian.cr#L1"},{"filename":"src/charwidth/table.cr","line_number":7,"url":"https://github.com/naqvis/uni_char_width/blob/bbe0b6caaf93ec9a0550113be94632acd0b3d018/src/charwidth/table.cr#L7"},{"filename":"src/uniwidth.cr","line_number":2,"url":"https://github.com/naqvis/uni_char_width/blob/bbe0b6caaf93ec9a0550113be94632acd0b3d018/src/uniwidth.cr#L2"}],"repository_name":"uniwidth","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"NEW_LINE","name":"NEW_LINE","value":"\"\\n\"","doc":null,"summary":null},{"id":"VERSION","name":"VERSION","value":"\"0.1.1\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"Provides methods to get fixed width of the unicode character or string.","summary":"<p>Provides methods to get fixed width of the unicode character or string.</p>","class_methods":[{"id":"ambiguous?(codepoint:Int32)-class-method","html_id":"ambiguous?(codepoint:Int32)-class-method","name":"ambiguous?","doc":"returns whether is ambiguous width or not\nEastAsian Ambiguous characters that can be sometimes wide and sometimes\nnarrow and require additional information not contained in the character\ncode to further resolve their width.","summary":"<p>returns whether is ambiguous width or not EastAsian Ambiguous characters that can be sometimes wide and sometimes narrow and require additional information not contained in the character code to further resolve their width.</p>","abstract":false,"args":[{"name":"codepoint","doc":null,"default_value":"","external_name":"codepoint","restriction":"Int32"}],"args_string":"(codepoint : Int32)","args_html":"(codepoint : Int32)","location":{"filename":"src/uniwidth.cr","line_number":45,"url":"https://github.com/naqvis/uni_char_width/blob/bbe0b6caaf93ec9a0550113be94632acd0b3d018/src/uniwidth.cr#L45"},"def":{"name":"ambiguous?","args":[{"name":"codepoint","doc":null,"default_value":"","external_name":"codepoint","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"default_condition.ambiguous?(codepoint)"}},{"id":"ambiguous?(char:Char)-class-method","html_id":"ambiguous?(char:Char)-class-method","name":"ambiguous?","doc":"returns whether char is ambiguous width or not\nEastAsian Ambiguous characters that can be sometimes wide and sometimes\nnarrow and require additional information not contained in the character\ncode to further resolve their width.","summary":"<p>returns whether char is ambiguous width or not EastAsian Ambiguous characters that can be sometimes wide and sometimes narrow and require additional information not contained in the character code to further resolve their width.</p>","abstract":false,"args":[{"name":"char","doc":null,"default_value":"","external_name":"char","restriction":"Char"}],"args_string":"(char : Char)","args_html":"(char : Char)","location":{"filename":"src/uniwidth.cr","line_number":53,"url":"https://github.com/naqvis/uni_char_width/blob/bbe0b6caaf93ec9a0550113be94632acd0b3d018/src/uniwidth.cr#L53"},"def":{"name":"ambiguous?","args":[{"name":"char","doc":null,"default_value":"","external_name":"char","restriction":"Char"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ambiguous?(char.ord)"}},{"id":"default_condition-class-method","html_id":"default_condition-class-method","name":"default_condition","doc":"DefaultCondition is a condition in current locale","summary":"<p>DefaultCondition is a condition in current locale</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/charwidth/charwidth.cr","line_number":8,"url":"https://github.com/naqvis/uni_char_width/blob/bbe0b6caaf93ec9a0550113be94632acd0b3d018/src/charwidth/charwidth.cr#L8"},"def":{"name":"default_condition","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (value = @@default_condition).nil?\n  @@default_condition = (Condition.new)\nelse\n  value\nend"}},{"id":"east_asian?-class-method","html_id":"east_asian?-class-method","name":"east_asian?","doc":"return true if the current locale is CJK","summary":"<p>return true if the current locale is CJK</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/charwidth/eastasian.cr","line_number":2,"url":"https://github.com/naqvis/uni_char_width/blob/bbe0b6caaf93ec9a0550113be94632acd0b3d018/src/charwidth/eastasian.cr#L2"},"def":{"name":"east_asian?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"locale = ((ENV[\"LC_ALL\"]? || ENV[\"LC_CTYPE\"]?) || ENV[\"LANG\"]?) || \"\"\nif locale.empty? || ([\"POSIX\", \"C\"].includes?(locale))\n  return false\nend\nif (locale.size > 1 && (locale[0] == 'C')) && ((locale[1] == '.') || (locale[1] == '-'))\n  return false\nend\neast_asian(locale)\n"}},{"id":"neutral?(codepoint:Int32)-class-method","html_id":"neutral?(codepoint:Int32)-class-method","name":"neutral?","doc":"returns whether is neutral width or not\nNeutral characters do not occur in legacy East Asian character sets.","summary":"<p>returns whether is neutral width or not Neutral characters do not occur in legacy East Asian character sets.</p>","abstract":false,"args":[{"name":"codepoint","doc":null,"default_value":"","external_name":"codepoint","restriction":"Int32"}],"args_string":"(codepoint : Int32)","args_html":"(codepoint : Int32)","location":{"filename":"src/uniwidth.cr","line_number":59,"url":"https://github.com/naqvis/uni_char_width/blob/bbe0b6caaf93ec9a0550113be94632acd0b3d018/src/uniwidth.cr#L59"},"def":{"name":"neutral?","args":[{"name":"codepoint","doc":null,"default_value":"","external_name":"codepoint","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"default_condition.neutral?(codepoint)"}},{"id":"neutral?(char:Char)-class-method","html_id":"neutral?(char:Char)-class-method","name":"neutral?","doc":"returns whether char is neutral width or not\nNeutral characters do not occur in legacy East Asian character sets.","summary":"<p>returns whether char is neutral width or not Neutral characters do not occur in legacy East Asian character sets.</p>","abstract":false,"args":[{"name":"char","doc":null,"default_value":"","external_name":"char","restriction":"Char"}],"args_string":"(char : Char)","args_html":"(char : Char)","location":{"filename":"src/uniwidth.cr","line_number":65,"url":"https://github.com/naqvis/uni_char_width/blob/bbe0b6caaf93ec9a0550113be94632acd0b3d018/src/uniwidth.cr#L65"},"def":{"name":"neutral?","args":[{"name":"char","doc":null,"default_value":"","external_name":"char","restriction":"Char"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"neutral?(char.ord)"}},{"id":"pad_left(str:String,w:Int32)-class-method","html_id":"pad_left(str:String,w:Int32)-class-method","name":"pad_left","doc":"returns a string filled in left by spaces in `w` cells","summary":"<p>returns a string filled in left by spaces in <code>w</code> cells</p>","abstract":false,"args":[{"name":"str","doc":null,"default_value":"","external_name":"str","restriction":"String"},{"name":"w","doc":null,"default_value":"","external_name":"w","restriction":"Int32"}],"args_string":"(str : String, w : Int32)","args_html":"(str : String, w : Int32)","location":{"filename":"src/uniwidth.cr","line_number":32,"url":"https://github.com/naqvis/uni_char_width/blob/bbe0b6caaf93ec9a0550113be94632acd0b3d018/src/uniwidth.cr#L32"},"def":{"name":"pad_left","args":[{"name":"str","doc":null,"default_value":"","external_name":"str","restriction":"String"},{"name":"w","doc":null,"default_value":"","external_name":"w","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"default_condition.pad_left(str, w)"}},{"id":"pad_right(str:String,w:Int32)-class-method","html_id":"pad_right(str:String,w:Int32)-class-method","name":"pad_right","doc":"returns a string filled in right by spaces in `w` cells","summary":"<p>returns a string filled in right by spaces in <code>w</code> cells</p>","abstract":false,"args":[{"name":"str","doc":null,"default_value":"","external_name":"str","restriction":"String"},{"name":"w","doc":null,"default_value":"","external_name":"w","restriction":"Int32"}],"args_string":"(str : String, w : Int32)","args_html":"(str : String, w : Int32)","location":{"filename":"src/uniwidth.cr","line_number":37,"url":"https://github.com/naqvis/uni_char_width/blob/bbe0b6caaf93ec9a0550113be94632acd0b3d018/src/uniwidth.cr#L37"},"def":{"name":"pad_right","args":[{"name":"str","doc":null,"default_value":"","external_name":"str","restriction":"String"},{"name":"w","doc":null,"default_value":"","external_name":"w","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"default_condition.pad_right(str, w)"}},{"id":"truncate(str:String,w:Int32,tail:String)-class-method","html_id":"truncate(str:String,w:Int32,tail:String)-class-method","name":"truncate","doc":"return string truncated with `w` cells","summary":"<p>return string truncated with <code>w</code> cells</p>","abstract":false,"args":[{"name":"str","doc":null,"default_value":"","external_name":"str","restriction":"String"},{"name":"w","doc":null,"default_value":"","external_name":"w","restriction":"Int32"},{"name":"tail","doc":null,"default_value":"","external_name":"tail","restriction":"String"}],"args_string":"(str : String, w : Int32, tail : String)","args_html":"(str : String, w : Int32, tail : String)","location":{"filename":"src/uniwidth.cr","line_number":22,"url":"https://github.com/naqvis/uni_char_width/blob/bbe0b6caaf93ec9a0550113be94632acd0b3d018/src/uniwidth.cr#L22"},"def":{"name":"truncate","args":[{"name":"str","doc":null,"default_value":"","external_name":"str","restriction":"String"},{"name":"w","doc":null,"default_value":"","external_name":"w","restriction":"Int32"},{"name":"tail","doc":null,"default_value":"","external_name":"tail","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"default_condition.truncate(str, w, tail)"}},{"id":"width(codepoint:Int32)-class-method","html_id":"width(codepoint:Int32)-class-method","name":"width","doc":"returns the number of cells in codepoint\nsee http://www.unicode.org/reports/tr11/","summary":"<p>returns the number of cells in codepoint see http://www.unicode.org/reports/tr11/</p>","abstract":false,"args":[{"name":"codepoint","doc":null,"default_value":"","external_name":"codepoint","restriction":"Int32"}],"args_string":"(codepoint : Int32)","args_html":"(codepoint : Int32)","location":{"filename":"src/uniwidth.cr","line_number":7,"url":"https://github.com/naqvis/uni_char_width/blob/bbe0b6caaf93ec9a0550113be94632acd0b3d018/src/uniwidth.cr#L7"},"def":{"name":"width","args":[{"name":"codepoint","doc":null,"default_value":"","external_name":"codepoint","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"default_condition.width(codepoint)"}},{"id":"width(char:Char)-class-method","html_id":"width(char:Char)-class-method","name":"width","doc":"return the number of cells in `char'","summary":"<p>return the number of cells in `char'</p>","abstract":false,"args":[{"name":"char","doc":null,"default_value":"","external_name":"char","restriction":"Char"}],"args_string":"(char : Char)","args_html":"(char : Char)","location":{"filename":"src/uniwidth.cr","line_number":12,"url":"https://github.com/naqvis/uni_char_width/blob/bbe0b6caaf93ec9a0550113be94632acd0b3d018/src/uniwidth.cr#L12"},"def":{"name":"width","args":[{"name":"char","doc":null,"default_value":"","external_name":"char","restriction":"Char"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"width(char.ord)"}},{"id":"width(str:String)-class-method","html_id":"width(str:String)-class-method","name":"width","doc":"returns string width","summary":"<p>returns string width</p>","abstract":false,"args":[{"name":"str","doc":null,"default_value":"","external_name":"str","restriction":"String"}],"args_string":"(str : String)","args_html":"(str : String)","location":{"filename":"src/uniwidth.cr","line_number":17,"url":"https://github.com/naqvis/uni_char_width/blob/bbe0b6caaf93ec9a0550113be94632acd0b3d018/src/uniwidth.cr#L17"},"def":{"name":"width","args":[{"name":"str","doc":null,"default_value":"","external_name":"str","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"default_condition.width(str)"}},{"id":"wrap(str:String,w:Int32)-class-method","html_id":"wrap(str:String,w:Int32)-class-method","name":"wrap","doc":"returns a string wrapped with `w` cells","summary":"<p>returns a string wrapped with <code>w</code> cells</p>","abstract":false,"args":[{"name":"str","doc":null,"default_value":"","external_name":"str","restriction":"String"},{"name":"w","doc":null,"default_value":"","external_name":"w","restriction":"Int32"}],"args_string":"(str : String, w : Int32)","args_html":"(str : String, w : Int32)","location":{"filename":"src/uniwidth.cr","line_number":27,"url":"https://github.com/naqvis/uni_char_width/blob/bbe0b6caaf93ec9a0550113be94632acd0b3d018/src/uniwidth.cr#L27"},"def":{"name":"wrap","args":[{"name":"str","doc":null,"default_value":"","external_name":"str","restriction":"String"},{"name":"w","doc":null,"default_value":"","external_name":"w","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"default_condition.wrap(str, w)"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"uniwidth/UnicodeCharWidth/Condition","path":"UnicodeCharWidth/Condition.html","kind":"class","full_name":"UnicodeCharWidth::Condition","name":"Condition","abstract":false,"superclass":{"html_id":"uniwidth/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"uniwidth/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"uniwidth/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/charwidth/charwidth.cr","line_number":10,"url":"https://github.com/naqvis/uni_char_width/blob/bbe0b6caaf93ec9a0550113be94632acd0b3d018/src/charwidth/charwidth.cr#L10"}],"repository_name":"uniwidth","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"uniwidth/UnicodeCharWidth","kind":"module","full_name":"UnicodeCharWidth","name":"UnicodeCharWidth"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(east_asian=Condition.handle_env,strict_emoji_neutral=true)-class-method","html_id":"new(east_asian=Condition.handle_env,strict_emoji_neutral=true)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"east_asian","doc":null,"default_value":"Condition.handle_env","external_name":"east_asian","restriction":""},{"name":"strict_emoji_neutral","doc":null,"default_value":"true","external_name":"strict_emoji_neutral","restriction":""}],"args_string":"(east_asian = <span class=\"t\">Condition</span>.handle_env, strict_emoji_neutral = <span class=\"n\">true</span>)","args_html":"(east_asian = <span class=\"t\">Condition</span>.handle_env, strict_emoji_neutral = <span class=\"n\">true</span>)","location":{"filename":"src/charwidth/charwidth.cr","line_number":16,"url":"https://github.com/naqvis/uni_char_width/blob/bbe0b6caaf93ec9a0550113be94632acd0b3d018/src/charwidth/charwidth.cr#L16"},"def":{"name":"new","args":[{"name":"east_asian","doc":null,"default_value":"Condition.handle_env","external_name":"east_asian","restriction":""},{"name":"strict_emoji_neutral","doc":null,"default_value":"true","external_name":"strict_emoji_neutral","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(east_asian, strict_emoji_neutral)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"ambiguous?(codepoint:Int32)-instance-method","html_id":"ambiguous?(codepoint:Int32)-instance-method","name":"ambiguous?","doc":"returns whether is ambiguous width or not","summary":"<p>returns whether is ambiguous width or not</p>","abstract":false,"args":[{"name":"codepoint","doc":null,"default_value":"","external_name":"codepoint","restriction":"Int32"}],"args_string":"(codepoint : Int32)","args_html":"(codepoint : Int32)","location":{"filename":"src/charwidth/charwidth.cr","line_number":139,"url":"https://github.com/naqvis/uni_char_width/blob/bbe0b6caaf93ec9a0550113be94632acd0b3d018/src/charwidth/charwidth.cr#L139"},"def":{"name":"ambiguous?","args":[{"name":"codepoint","doc":null,"default_value":"","external_name":"codepoint","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"in_tables?(codepoint, Private, UnicodeCharWidth.ambiguous)"}},{"id":"east_asian:Bool-instance-method","html_id":"east_asian:Bool-instance-method","name":"east_asian","doc":"Will be set to true if the current locale is CJK","summary":"<p>Will be set to true if the current locale is CJK</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/charwidth/charwidth.cr","line_number":12,"url":"https://github.com/naqvis/uni_char_width/blob/bbe0b6caaf93ec9a0550113be94632acd0b3d018/src/charwidth/charwidth.cr#L12"},"def":{"name":"east_asian","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@east_asian"}},{"id":"east_asian=(east_asian:Bool)-instance-method","html_id":"east_asian=(east_asian:Bool)-instance-method","name":"east_asian=","doc":"Will be set to true if the current locale is CJK","summary":"<p>Will be set to true if the current locale is CJK</p>","abstract":false,"args":[{"name":"east_asian","doc":null,"default_value":"","external_name":"east_asian","restriction":"Bool"}],"args_string":"(east_asian : Bool)","args_html":"(east_asian : Bool)","location":{"filename":"src/charwidth/charwidth.cr","line_number":12,"url":"https://github.com/naqvis/uni_char_width/blob/bbe0b6caaf93ec9a0550113be94632acd0b3d018/src/charwidth/charwidth.cr#L12"},"def":{"name":"east_asian=","args":[{"name":"east_asian","doc":null,"default_value":"","external_name":"east_asian","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@east_asian = east_asian"}},{"id":"neutral?(codepoint:Int32)-instance-method","html_id":"neutral?(codepoint:Int32)-instance-method","name":"neutral?","doc":"returns whether is neutral width or not","summary":"<p>returns whether is neutral width or not</p>","abstract":false,"args":[{"name":"codepoint","doc":null,"default_value":"","external_name":"codepoint","restriction":"Int32"}],"args_string":"(codepoint : Int32)","args_html":"(codepoint : Int32)","location":{"filename":"src/charwidth/charwidth.cr","line_number":144,"url":"https://github.com/naqvis/uni_char_width/blob/bbe0b6caaf93ec9a0550113be94632acd0b3d018/src/charwidth/charwidth.cr#L144"},"def":{"name":"neutral?","args":[{"name":"codepoint","doc":null,"default_value":"","external_name":"codepoint","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"in_table?(codepoint, UnicodeCharWidth.neutral)"}},{"id":"pad_left(str:String,w:Int32)-instance-method","html_id":"pad_left(str:String,w:Int32)-instance-method","name":"pad_left","doc":"returns a string filled in left by spaces in `w` cells","summary":"<p>returns a string filled in left by spaces in <code>w</code> cells</p>","abstract":false,"args":[{"name":"str","doc":null,"default_value":"","external_name":"str","restriction":"String"},{"name":"w","doc":null,"default_value":"","external_name":"w","restriction":"Int32"}],"args_string":"(str : String, w : Int32)","args_html":"(str : String, w : Int32)","location":{"filename":"src/charwidth/charwidth.cr","line_number":117,"url":"https://github.com/naqvis/uni_char_width/blob/bbe0b6caaf93ec9a0550113be94632acd0b3d018/src/charwidth/charwidth.cr#L117"},"def":{"name":"pad_left","args":[{"name":"str","doc":null,"default_value":"","external_name":"str","restriction":"String"},{"name":"w","doc":null,"default_value":"","external_name":"w","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"wid = width(str)\ncnt = w - wid\nif cnt > 0\n  b = Bytes.new(cnt, ' '.ord.to_u8)\n  return (String.new(b)) + str\nend\nstr\n"}},{"id":"pad_right(str:String,w:Int32)-instance-method","html_id":"pad_right(str:String,w:Int32)-instance-method","name":"pad_right","doc":"returns a string filled in right by spaces in `w` cells","summary":"<p>returns a string filled in right by spaces in <code>w</code> cells</p>","abstract":false,"args":[{"name":"str","doc":null,"default_value":"","external_name":"str","restriction":"String"},{"name":"w","doc":null,"default_value":"","external_name":"w","restriction":"Int32"}],"args_string":"(str : String, w : Int32)","args_html":"(str : String, w : Int32)","location":{"filename":"src/charwidth/charwidth.cr","line_number":128,"url":"https://github.com/naqvis/uni_char_width/blob/bbe0b6caaf93ec9a0550113be94632acd0b3d018/src/charwidth/charwidth.cr#L128"},"def":{"name":"pad_right","args":[{"name":"str","doc":null,"default_value":"","external_name":"str","restriction":"String"},{"name":"w","doc":null,"default_value":"","external_name":"w","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"wid = width(str)\ncnt = w - wid\nif cnt > 0\n  b = Bytes.new(cnt, ' '.ord.to_u8)\n  return str + (String.new(b))\nend\nstr\n"}},{"id":"strict_emoji_neutral:Bool-instance-method","html_id":"strict_emoji_neutral:Bool-instance-method","name":"strict_emoji_neutral","doc":"should be set to false if handle broken fonts","summary":"<p>should be set to false if handle broken fonts</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/charwidth/charwidth.cr","line_number":14,"url":"https://github.com/naqvis/uni_char_width/blob/bbe0b6caaf93ec9a0550113be94632acd0b3d018/src/charwidth/charwidth.cr#L14"},"def":{"name":"strict_emoji_neutral","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@strict_emoji_neutral"}},{"id":"strict_emoji_neutral=(strict_emoji_neutral:Bool)-instance-method","html_id":"strict_emoji_neutral=(strict_emoji_neutral:Bool)-instance-method","name":"strict_emoji_neutral=","doc":"should be set to false if handle broken fonts","summary":"<p>should be set to false if handle broken fonts</p>","abstract":false,"args":[{"name":"strict_emoji_neutral","doc":null,"default_value":"","external_name":"strict_emoji_neutral","restriction":"Bool"}],"args_string":"(strict_emoji_neutral : Bool)","args_html":"(strict_emoji_neutral : Bool)","location":{"filename":"src/charwidth/charwidth.cr","line_number":14,"url":"https://github.com/naqvis/uni_char_width/blob/bbe0b6caaf93ec9a0550113be94632acd0b3d018/src/charwidth/charwidth.cr#L14"},"def":{"name":"strict_emoji_neutral=","args":[{"name":"strict_emoji_neutral","doc":null,"default_value":"","external_name":"strict_emoji_neutral","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@strict_emoji_neutral = strict_emoji_neutral"}},{"id":"truncate(str:String,w:Int32,tail:String)-instance-method","html_id":"truncate(str:String,w:Int32,tail:String)-instance-method","name":"truncate","doc":"return string truncated with `w` cells","summary":"<p>return string truncated with <code>w</code> cells</p>","abstract":false,"args":[{"name":"str","doc":null,"default_value":"","external_name":"str","restriction":"String"},{"name":"w","doc":null,"default_value":"","external_name":"w","restriction":"Int32"},{"name":"tail","doc":null,"default_value":"","external_name":"tail","restriction":"String"}],"args_string":"(str : String, w : Int32, tail : String)","args_html":"(str : String, w : Int32, tail : String)","location":{"filename":"src/charwidth/charwidth.cr","line_number":72,"url":"https://github.com/naqvis/uni_char_width/blob/bbe0b6caaf93ec9a0550113be94632acd0b3d018/src/charwidth/charwidth.cr#L72"},"def":{"name":"truncate","args":[{"name":"str","doc":null,"default_value":"","external_name":"str","restriction":"String"},{"name":"w","doc":null,"default_value":"","external_name":"w","restriction":"Int32"},{"name":"tail","doc":null,"default_value":"","external_name":"tail","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (width(str)) <= w\n  return str\nend\nw = w - (width(tail))\nsw = 0\npos = str.bytesize\n(TextSegment.graphemes(str)).each do |cluster|\n  chw = 0\n  cluster.codepoints.each do |cp|\n    chw = width(cp)\n    if chw > 0\n      break\n    end\n  end\n  if (sw + chw) > w\n    pos, _ = cluster.positions\n    break\n  end\n  sw = sw + chw\nend\n(String.new(str.to_slice[...pos])) + tail\n"}},{"id":"width(codepoint:Int32)-instance-method","html_id":"width(codepoint:Int32)-instance-method","name":"width","doc":"returns the number of cells in codepoint\nsee http://www.unicode.org/reports/tr11/","summary":"<p>returns the number of cells in codepoint see http://www.unicode.org/reports/tr11/</p>","abstract":false,"args":[{"name":"codepoint","doc":null,"default_value":"","external_name":"codepoint","restriction":"Int32"}],"args_string":"(codepoint : Int32)","args_html":"(codepoint : Int32)","location":{"filename":"src/charwidth/charwidth.cr","line_number":21,"url":"https://github.com/naqvis/uni_char_width/blob/bbe0b6caaf93ec9a0550113be94632acd0b3d018/src/charwidth/charwidth.cr#L21"},"def":{"name":"width","args":[{"name":"codepoint","doc":null,"default_value":"","external_name":"codepoint","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if !east_asian\n  case\n  when codepoint < 32 || codepoint > 1114111\n    0\n  when (codepoint >= 127 && codepoint <= 159) || (codepoint == 173)\n    0\n  when codepoint < 768\n    1\n  when in_table?(codepoint, UnicodeCharWidth.narrow)\n    1\n  when in_tables?(codepoint, NonPrint, UnicodeCharWidth.combining)\n    0\n  when in_table?(codepoint, UnicodeCharWidth.doublewidth)\n    2\n  else\n    1\n  end\nelse\n  case\n  when (codepoint < 0 || codepoint > 1114111) || (in_tables?(codepoint, NonPrint, UnicodeCharWidth.combining))\n    0\n  when in_table?(codepoint, UnicodeCharWidth.narrow)\n    1\n  when in_tables?(codepoint, UnicodeCharWidth.ambiguous, UnicodeCharWidth.doublewidth)\n    2\n  when (!strict_emoji_neutral) && (in_tables?(codepoint, UnicodeCharWidth.ambiguous, UnicodeCharWidth.emoji, UnicodeCharWidth.narrow))\n    2\n  else\n    1\n  end\nend"}},{"id":"width(char:Char)-instance-method","html_id":"width(char:Char)-instance-method","name":"width","doc":"return the number of cells in `char'","summary":"<p>return the number of cells in `char'</p>","abstract":false,"args":[{"name":"char","doc":null,"default_value":"","external_name":"char","restriction":"Char"}],"args_string":"(char : Char)","args_html":"(char : Char)","location":{"filename":"src/charwidth/charwidth.cr","line_number":53,"url":"https://github.com/naqvis/uni_char_width/blob/bbe0b6caaf93ec9a0550113be94632acd0b3d018/src/charwidth/charwidth.cr#L53"},"def":{"name":"width","args":[{"name":"char","doc":null,"default_value":"","external_name":"char","restriction":"Char"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"width(char.ord)"}},{"id":"width(str:String)-instance-method","html_id":"width(str:String)-instance-method","name":"width","doc":"returns string width","summary":"<p>returns string width</p>","abstract":false,"args":[{"name":"str","doc":null,"default_value":"","external_name":"str","restriction":"String"}],"args_string":"(str : String)","args_html":"(str : String)","location":{"filename":"src/charwidth/charwidth.cr","line_number":58,"url":"https://github.com/naqvis/uni_char_width/blob/bbe0b6caaf93ec9a0550113be94632acd0b3d018/src/charwidth/charwidth.cr#L58"},"def":{"name":"width","args":[{"name":"str","doc":null,"default_value":"","external_name":"str","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"res = 0\n(TextSegment.graphemes(str)).each do |cluster|\n  chw = 0\n  cluster.codepoints.each do |cp|\n    chw = width(cp)\n    if chw > 0\n      break\n    end\n  end\n  res = res + chw\nend\nres\n"}},{"id":"wrap(str:String,w:Int32)-instance-method","html_id":"wrap(str:String,w:Int32)-instance-method","name":"wrap","doc":"returns a string wrapped with `w` cells","summary":"<p>returns a string wrapped with <code>w</code> cells</p>","abstract":false,"args":[{"name":"str","doc":null,"default_value":"","external_name":"str","restriction":"String"},{"name":"w","doc":null,"default_value":"","external_name":"w","restriction":"Int32"}],"args_string":"(str : String, w : Int32)","args_html":"(str : String, w : Int32)","location":{"filename":"src/charwidth/charwidth.cr","line_number":94,"url":"https://github.com/naqvis/uni_char_width/blob/bbe0b6caaf93ec9a0550113be94632acd0b3d018/src/charwidth/charwidth.cr#L94"},"def":{"name":"wrap","args":[{"name":"str","doc":null,"default_value":"","external_name":"str","restriction":"String"},{"name":"w","doc":null,"default_value":"","external_name":"w","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"wid = 0\nString.build do |sb|\n  str.codepoints.each do |r|\n    cw = width(r)\n    if r.chr.in?(NEW_LINE)\n      sb << r.chr\n      wid = 0\n      next\n    else\n      if (wid + cw) > w\n        sb << NEW_LINE\n        wid = 0\n        sb << r.chr\n        wid = wid + cw\n        next\n      end\n    end\n    sb << r.chr\n    wid = wid + cw\n  end\nend\n"}}],"macros":[],"types":[]}]}]}}